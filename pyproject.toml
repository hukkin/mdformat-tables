[build-system]
requires = ["flit_core>=3.2.0,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "mdformat-tables"
version = "1.0.0"  # DO NOT EDIT THIS LINE MANUALLY. LET bump2version UTILITY DO IT
authors = [
    { name = "Chris Sewell", email = "executablebooks@gmail.com"},
]
maintainers = [
    { name = "Taneli Hukkinen", email = "hukkin@users.noreply.github.com"},
]
description = "Mdformat plugin for rendering tables"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9"
dependencies = [
    'mdformat >=0.7.19,<0.8.0',
    'wcwidth >=0.2.13',
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Topic :: Documentation",
    "Topic :: Text Processing :: Markup",
]
keywords = ["mdformat", "markdown", "formatter", "gfm"]

[project.urls]
"Homepage" = "https://github.com/hukkin/mdformat-tables"

[project.entry-points."mdformat.parser_extension"]
"tables" = "mdformat_tables"


[tool.isort]
# Force imports to be sorted by module, independent of import type
force_sort_within_sections = true
# Group first party and local folder imports together
no_lines_before = ["LOCALFOLDER"]

# Configure isort to work without access to site-packages
known_first_party = ["mdformat_tables", "tests"]

# Settings for Black compatibility
profile = "black"


[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config"
xfail_strict = true


[tool.tox]
requires = ["tox>=4.21.1"]
# Only run pytest envs when no args given to tox
env_list = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.tox.env_run_base]
description = "run tests under {base_python}"
deps = [
    "-r tests/requirements.txt",
]
commands = [
    ["pytest", { replace = "posargs", default = ["--cov", "--cov-fail-under", "100"], extend = true }],
]

[tool.tox.env."pre-commit"]
description = "run linters"
skip_install = true
deps = ["pre-commit"]
commands = [
    ["pre-commit", "run", { replace = "posargs", default = ["--all-files"], extend = true }],
]

[tool.tox.env."hook"]
description = "test unreleased changes via pre-commit hook"
skip_install = true
deps = ["pre-commit"]
commands = [
    ["pre-commit", "run", "--config", ".pre-commit-test.yaml", { replace = "posargs", default = ["--all-files", "--verbose", "--show-diff-on-failure"], extend = true }],
]
